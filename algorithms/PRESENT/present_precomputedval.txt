/*Variables*/
sbox :  [0xC, 0x5, 0x6, 0xB, 0x9, 0x0, 0xA, 0xD, 0x3, 0xE, 0xF, 0x8, 0x4, 0x7, 0x1, 0x2]
str:[0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55]
key  :  [0x3C,0xF4,0x00,0xD8,0x28,0xF1,0x08,0x7A,0x60,0x26,0x00,0x9b,0x25,0x1e,0x41,0x0f,0xcc,0x84,0x87,0x5e,0xc4,0x23,0xe9,0x81,0x99,0xf0,0xd0,0x0b,0x60,0x83,0x3d,0xb0,0x12,0x1e,0x7a,0x01,0x6c,0x90,0x78,0x64,0xc2,0x43,0x2d,0x80,0x0d,0x12,0x8f,0xac,0x07,0x06,0x05,0x30,0x43,0xe2,0x91,0xf5,0xc0,0x40,0x78,0xf8,0x48,0x3c,0xb1,0x1e,0x18,0x08,0x0f,0xbf,0x00,0xa6,0xd6,0x83,0x00,0xe1,0xe1,0x17,0xc0,0x14,0x89,0x67,0x20,0x3c,0xf8,0x02,0x98,0x22,0xf1,0xcc,0x7a,0x50,0x5f,0x80,0x57,0x24,0x9e,0x59,0x0f,0x0a,0x84,0xc7,0x8a,0xc4,0x36,0xeb,0x41,0x81,0xf0,0xf8,0x0b,0x20,0x66,0xbd,0x2d,0x10,0x1e,0x7f,0x01,0x44,0x91,0x78,0x05,0xc2,0xe5,0x2f,0x80,0x28,0x12,0xcf,0xac,0x87,0xfc,0x85,0x16,0x45,0xe2,0x99,0xf5,0xb0,0x40,0x88,0xa2,0x48,0x3b,0xb3,0x1e,0x16,0x08,0x91,0xbf,0x70,0x67,0x56,0xc4,0x02,0x21,0xf2,0x17,0x4e,0x14,0xa9,0x58,0x20,0x4c,0xfe,0xc2,0x89,0x22,0xf5,0xcc,0x3a,0xc9,0xdf,0x30,0x51,0xa4,0x9e,0x59,0x07,0x0b,0x34,0x26,0x8a,0xdd,0x33,0xeb,0x60,0x81,0x26,0xf9,0x5b,0x7b,0xe6,0x14,0x2c,0xd0,0x24,0x7f,0xcb,0x44,0x81,0x82,0x05,0x90,0xe4,0x6f,0x99,0x28,0x70,0xcf,0xec,0x92,0x7c,0x27,0x13,0x05,0xee,0x99,0x5d,0xb0,0xc0,0x64,0xa2,0xcb,0x3d,0xb3,0x0b,0x16,0x58,0x92,0x1f,0xb9,0xe7,0x7d,0xc1,0x02,0x4b,0xf2,0x83,0x4c,0xd4,0x2f,0x58,0x6c,0x49,0x7e,0x90,0x89,0x3a,0xf7,0x8c,0x2d,0x49,0x03,0x32,0x51,0xe7,0x9e,0xf1,0x05,0x3b,0x40,0x26,0xe7,0xdc,0x33,0xbe,0x60,0xa7,0x25,0xa9,0x9c,0xfb,0xcb,0x17,0xec,0xb4,0x24,0x15,0xc8,0x14,0xf9,0x82,0x93,0x96,0xa4,0x02,0x99,0x82,0x73,0xdf,0xd2,0x12,0x5a,0x20,0x53,0x70,0xee,0x3b,0x5f,0xd0,0x0b,0x64,0x05,0xce,0x7d,0xe7,0x0b,0x5a,0x5a,0x92,0xc0,0x39,0xe0,0x7c,0x41,0x4b,0x4b,0x72,0x81,0xfc]
tblidiv8: [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7]
tblimod8: [0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7]
tblpboxidiv8: [0,2,4,6,0,2,4,6,0,2,4,6,0,2,4,6,0,2,4,6,0,2,4,6,0,2,4,6,0,2,4,6,1,3,5,7,1,3,5,7,1,3,5,7,1,3,5,7,1,3,5,7,1,3,5,7,1,3,5,7,1,3,5,7]
tblpboximod8: [0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7]
table:[0,0,0,0,0,0,0,0]

CRYPTO_KEY_SIZE_REV: -10
Z : 0
M : -1
U :1
rnd   : 0x1aaaa
rndmax: 31
*st8addr: str(7)
*stend : str(7)
staddr: str
*keyaddr: key(2)
sbox_counter : 0
pbox_counter:0
pbox_counter_n:0
lshift_counter:0
sb_mask:0x0F
sb_maskn:0x1FFF1
pb_mask:0x01
pb_maskn:0x1FFFF
*sb_addr: sbox

val8:8
con8:8
val64:64
con64:64

res:0
xor:0
temp:0
temp1:0
t:0
resn:0
temp1n:0
mxr:0
sh_res:0
d:0
dn:0
mod:0
prev_st:0
strval:0
tmod:0
shift_t:0
table_value:0
tempn:0
pb_val:0
l_s:0

/*Expected Result*/
expected_result:[0xd0,0x44,0x6a,0x0a,0xc9,0x13,0x35,0xd4]

/* ************************************************************************** */
/*                                SBOX LAYER                                  */
/* ************************************************************************** */
sbox_layer:sbox_counter,sbox_counter,Z;    //sbox_counter=0
           //tmp = sbox[s[i] & 0x0F]

           sbox_start:res,res,str(0);      //s[i]&0xF
           sb_maskn,res,Z;
           c1:xor,xor,str(0);
           Z,xor,sb_mask;
           xor,res,Z,_SH;

           resn,resn,Z;
           res,resn,Z;

           resn,x(2),Z;                    //*sb=*sbox[s[i]&0xF]
           M,x(2),Z;                       // Need +1 to go to correct position
           x:temp,temp,sbox;               //temp=sbox[s[i]&0xF]

           //tmp |= sbox[(s[i]>>4)&0x0F]<<4

           d0:res,res,str(0);             //s[i]&0xF
           //shift right four times

           Z,res,Z,_SH;
           Z,res,Z,_SH;
           Z,res,Z,_SH;
           Z,res,Z,_SH;
           sh_res,sh_res,res;

           sb_maskn,res,Z;
           xor,xor,sh_res;
           Z,xor,sb_mask;
           xor,res,Z,_SH;

           resn,resn,Z;
           res,resn,Z;

           resn,x1(2),Z;                  //*sb=*sbox[s[i]&0xF]
           M,x1(2),Z;                     // Need +1 to go to correct position
           x1:temp1,temp1,sbox;           //temp=sbox[s[i]&0xF]
           temp1n,temp1n,Z;
           temp1,temp1n,Z;

           //shift left 4 times
           temp1n,temp1,Z;
           temp1n,temp1n,Z;
           temp1,temp1n,Z;
           temp1n,temp1,Z;
           temp1n,temp1n,Z;
           temp1,temp1n,Z;
           temp1n,temp1,Z;
           temp1n,temp1n,Z;
           temp1,temp1n,Z;
           temp1n,temp1,Z;

           //res= temp|temp1
           temp1n,temp1n,Z;
           res,res,temp;
           temp1,temp1n,Z;
           temp1n,res,Z;
           xor,xor,temp;
           Z,xor,temp1;
           mxr,mxr,Z;
           xor,mxr,Z;
           mxr,res,Z,_SH;

           //s[i]=temp
           c2:str(0),str(0),res;         //s[i]=temp
           M,sbox_start(2),Z;
           M,c1(2),Z;
           M,d0(2),Z;

           M,c2(0),Z;
           M,c2(1),Z;
           x(2),x(2),sb_addr;
           x1(2),x1(2),sb_addr;
           M,sbox_counter,Z;               //sbox_counter++
           sbox_counter,val8,Z,fun2;       //While sbox_counter<8
           val8,val8,con8,sbox_start;      //Jump to start

           //End of function reset variables
           fun2:val8,val8,con8;
           sbox_start(2),sbox_start(2),str;
           c1(2),c1(2),str;
           d0(2),d0(2),str;
           c2(0),c2(0),str;
           c2(1),c2(1),str,pbox_layer;
/* ************************************************************************** */
/*                                PBOX LAYER                                  */
/* ************************************************************************** */
pbox_layer:pbox_counter,pbox_counter,Z;

        //tmp= (s[i/8] >> i%8) &0x01;
        //d=i/8 , mod=i%8
        tbldivi :d,d,tblidiv8(0);
        tblmodi :mod,mod,tblimod8(0);
        //

        //s[i/8]
        end:dn,dn,Z;
        d,dn,Z;
        dn,pbl1(2),Z;
        pbl1:strval,strval,str(0);
        //

        //shift strval mod possitions
        //s[i/8]>>i%8
        tmod,tmod,mod;
        Z,tmod,Z,pbl2; // shift is 0
        tmod,tmod,mod;
        shift_t,shift_t,Z;
        s_loop:Z,strval,Z,_SH;
               M,shift_t,Z;
               shift_t,tmod,Z,pbl2;
               tmod,tmod,mod,s_loop;
       //

       //res = (s[i/8]>>i%8)&0x01
       pbl2:res,res,strval;
       pb_maskn,res,Z;
       pbl3:xor,xor,strval;
       Z,xor,pb_mask;
       xor,res,Z,_SH;
       //

       //temp=res
       temp,temp,res;

       //pbox[i]
       pbox_counter_n,pbox_counter_n,Z;
       pbox_counter,pbox_counter_n,Z;

       //pbox[i]%8 and pbox[i]/8
       //Find the divisor and the mod
       tblpbdivi :d,d,tblpboxidiv8(0);
       tblpbmodi :mod,mod,tblpboximod8(0);
       //

       end_pboxi:temp,temp,res;

       //Left shift temp = temp << pbox[i]%8
       l_s,l_s,mod;
       lshift_counter,lshift_counter,Z;
       t,t,Z;
       temp,t,Z;
       temp1,temp1,pb_val;
       Z,mod,Z,end_lsp_loop; //skip if shift equals to zero
       lsp_loop:t,temp,Z;
       t,t,Z;
       temp,t,Z;
       M,lshift_counter,Z;
       lshift_counter,l_s,Z,end_lsp_loop;
       l_s,l_s,mod,lsp_loop;
       //

       //temporary table
       end_lsp_loop:dn,dn,Z;
       d,dn,Z;
       dn,t_tbl(2),Z;
       dn,t_tbl1(0),Z;
       dn,t_tbl1(1),Z;
       t_tbl:table_value,table_value,table(0);

       temp1,temp1,table_value;

       //res = temp1 | temp
       tempn,tempn,Z;
       temp,tempn,Z;
       tempn,table_value,Z;
       xor,xor,temp1;
       Z,xor,temp;
       mxr,mxr,Z;
       xor,mxr,Z;
       mxr,table_value,Z,_SH;
       //

       //add it to the temporary table
       t_tbl1:table(0),table(0),table_value;
       //

       M,pbox_counter,Z;    //INC pbox_counter

       //REVERT ADDRESSES
       pbl1(2),pbl1(2),str;
       t_tbl(2),t_tbl(2),table;
       t_tbl1(0),t_tbl1(0),table;
       t_tbl1(1),t_tbl1(1),table;

       //Incr tables +1
       M,tbldivi(2),Z;
       M,tblmodi(2),Z;
       M,tblpbdivi(2),Z;
       M,tblpbmodi(2),Z;
       //
       //while pbox_counter<64 go to tbldivi else go to fun3
       pbox_counter,val64,Z,fun3;
       val64,val64,con64,tbldivi;

       fun3:val64,val64,con64;

       //ADD VALUES TO str FROM table
       str(0),str(0),table(0);
       str(1),str(1),table(1);
       str(2),str(2),table(2);
       str(3),str(3),table(3);
       str(4),str(4),table(4);
       str(5),str(5),table(5);
       str(6),str(6),table(6);
       str(7),str(7),table(7);

       //REVERT ADDRESSES
       tbldivi(2),tbldivi(2),tblidiv8;
       tblmodi(2),tblmodi(2),tblimod8;
       tblpbdivi(2),tblpbdivi(2),tblpboxidiv8;
       tblpbmodi(2),tblpbmodi(2),tblpboximod8;

       //CLEAR table
       table(0),table(0),Z;
       table(1),table(1),Z;
       table(2),table(2),Z;
       table(3),table(3),Z;
       table(4),table(4),Z;
       table(5),table(5),Z;
       table(6),table(6),Z;
       table(7),table(7),Z,return;
/* ************************************************************************** */
/*                              ADD ROUND KEY                                 */
/* ************************************************************************** */
add_round_key:Z,str(0),key(2);                      //str(n)=str(n) xor key(n+2)
          M,add_round_key(2),Z;                     //INC key
          add_round_key(1),st8addr,Z,fun1;          //st8addr=st8addr-str(n)
          M,add_round_key(1),Z;                     //INC str
          st8addr,st8addr,stend,add_round_key;      // st8addr=stend
          fun1:add_round_key(1),add_round_key(1),staddr;    //str(n)=staddr
          CRYPTO_KEY_SIZE_REV,keyaddr,Z;
          add_round_key(2),add_round_key(2),keyaddr;  //key(n)=keyaddr
          Z,rnd,Z,loop;                              //BREQ rnd; EOP
          st8addr,st8addr,stend,sbox_layer;          //st8addr=stend
/* ************************************************************************** */
/*                                  MAIN                                      */
/* ************************************************************************** */
_main:rnd,rnd,rndmax,begin;                         //MOV rnd,rndmax; JMP Begin
     rounds:U ,rnd, Z;
     begin:Z,Z,Z,add_round_key;                     //JMP AddRoundKey;
     return:Z , Z , Z,rounds;                       //JMP rounds
     loop: Z,Z,Z,loop;                              // End of program
