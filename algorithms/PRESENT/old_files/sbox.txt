/*Variables*/
CRYPTO_IN_SIZE  : 8 	// Present has 64-bit blocks

CRYPTO_KEY_SIZE : 10  // Present has 80-bit key
CRYPTO_KEY_SIZE_REV: -10
CRYPTO_OUT_SIZE : 8   // Present has 64-bit blocks

sbox :  [0xC, 0x5, 0x6, 0xB, 0x9, 0x0, 0xA, 0xD, 0x3, 0xE, 0xF, 0x8, 0x4, 0x7, 0x1, 0x2]
pbox :  [0,16,32,48,1,17,33,49,2,18,34,50,3,19,35,51,4,20,36,52,5,21,37,53,6,22,38,54,7,23,39,55,8,24,40,56,9,25,41,57,10,26,42,58,11,27,43,59,12,28,44,60,13,29,45,61,14,30,46,62,15,31,47,63]
str:[0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55]
key  :  [0x3C,0xF4,0x00,0xD8,0x28,0xF1,0x08,0x7A,0x60,0x26,0x00,0x9b,0x25,0x1e,0x41,0x0f,0xcc,0x84,0x87,0x5e,0xc4,0x23,0xe9,0x81,0x99,0xf0,0xd0,0x0b,0x60,0x83,0x3d,0xb0,0x12,0x1e,0x7a,0x01,0x6c,0x90,0x78,0x64,0xc2,0x43,0x2d,0x80,0x0d,0x12,0x8f,0xac,0x07,0x06,0x05,0x30,0x43,0xe2,0x91,0xf5,0xc0,0x40,0x78,0xf8,0x48,0x3c,0xb1,0x1e,0x18,0x08,0x0f,0xbf,0x00,0xa6,0xd6,0x83,0x00,0xe1,0xe1,0x17,0xc0,0x14,0x89,0x67,0x20,0x3c,0xf8,0x02,0x98,0x22,0xf1,0xcc,0x7a,0x50,0x5f,0x80,0x57,0x24,0x9e,0x59,0x0f,0x0a,0x84,0xc7,0x8a,0xc4,0x36,0xeb,0x41,0x81,0xf0,0xf8,0x0b,0x20,0x66,0xbd,0x2d,0x10,0x1e,0x7f,0x01,0x44,0x91,0x78,0x05,0xc2,0xe5,0x2f,0x80,0x28,0x12,0xcf,0xac,0x87,0xfc,0x85,0x16,0x45,0xe2,0x99,0xf5,0xb0,0x40,0x88,0xa2,0x48,0x3b,0xb3,0x1e,0x16,0x08,0x91,0xbf,0x70,0x67,0x56,0xc4,0x02,0x21,0xf2,0x17,0x4e,0x14,0xa9,0x58,0x20,0x4c,0xfe,0xc2,0x89,0x22,0xf5,0xcc,0x3a,0xc9,0xdf,0x30,0x51,0xa4,0x9e,0x59,0x07,0x0b,0x34,0x26,0x8a,0xdd,0x33,0xeb,0x60,0x81,0x26,0xf9,0x5b,0x7b,0xe6,0x14,0x2c,0xd0,0x24,0x7f,0xcb,0x44,0x81,0x82,0x05,0x90,0xe4,0x6f,0x99,0x28,0x70,0xcf,0xec,0x92,0x7c,0x27,0x13,0x05,0xee,0x99,0x5d,0xb0,0xc0,0x64,0xa2,0xcb,0x3d,0xb3,0x0b,0x16,0x58,0x92,0x1f,0xb9,0xe7,0x7d,0xc1,0x02,0x4b,0xf2,0x83,0x4c,0xd4,0x2f,0x58,0x6c,0x49,0x7e,0x90,0x89,0x3a,0xf7,0x8c,0x2d,0x49,0x03,0x32,0x51,0xe7,0x9e,0xf1,0x05,0x3b,0x40,0x26,0xe7,0xdc,0x33,0xbe,0x60,0xa7,0x25,0xa9,0x9c,0xfb,0xcb,0x17,0xec,0xb4,0x24,0x15,0xc8,0x14,0xf9,0x82,0x93,0x96,0xa4,0x02,0x99,0x82,0x73,0xdf,0xd2,0x12,0x5a,0x20,0x53,0x70,0xee,0x3b,0x5f,0xd0,0x0b,0x64,0x05,0xce,0x7d,0xe7,0x0b,0x5a,0x5a,0x92,0xc0,0x39,0xe0,0x7c,0x41,0x4b,0x4b,0x72,0x81,0xfc]
//str:    [0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55]
//  key  :  [0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55,0x3C,0xF4,0x45,0x84,0x22,0x7B,0x38,0xC1,0x79,0x55]
Z : 0
M : -1
rnd   : 0x1aaaa
rndmax: 30
*st8addr: str(7)
*stend : str(7)
staddr: str
*keyaddr: key(2)
U :1
sbox_counter : 0
val8:8
con8:8
sb_mask:0x0F
sb_maskn:0x1FFF1
*sb_addr: sbox
res:0

xor:0
temp:0
temp1:0
t:0
resn:0
temp1n:0
mxr:0
sh_res:0

/*Expected Result*/
expected_result:[0xd0,0x44,0x6a,0x0a,0xc9,0x13,0x35,0xd4]

sbox_layer:sbox_counter,sbox_counter,Z;                      //sbox_counter=0
           sbox_start:Z,Z,Z;                                 //code goes here
           //tmp = sbox[s[i] & 0x0F]

           c0:res,res,str(0);                                //s[i]&0xF
           sb_maskn,res,Z;
           c1:xor,xor,str(0);
           Z,xor,sb_mask;
           xor,res,Z,_SH;

           resn,resn,Z;
           res,resn,Z;

           resn,x(2),Z;                                         //*sb=*sbox[s[i]&0xF]
           M,x(2),Z;                                            // Need +1 to go to correct possition
           x:temp,temp,sbox;                                    //temp=sbox[s[i]&0xF]

           //tmp |= sbox[(s[i]>>4)&0x0F]<<4

           d0:res,res,str(0);                                //s[i]&0xF
           //shift right four times

           Z,res,Z,_SH;
           Z,res,Z,_SH;
           Z,res,Z,_SH;
           Z,res,Z,_SH;
           sh_res,sh_res,res;

           sb_maskn,res,Z;
           xor,xor,sh_res;
           Z,xor,sb_mask;
           xor,res,Z,_SH;

           resn,resn,Z;
           res,resn,Z;

           resn,x1(2),Z;                                         //*sb=*sbox[s[i]&0xF]
           M,x1(2),Z;                                            // Need +1 to go to correct possition
           x1:temp1,temp1,sbox;                                    //temp=sbox[s[i]&0xF]
           temp1n,temp1n,Z;
           temp1,temp1n,Z;

           //shift 4 times
           temp1n,temp1,Z;
           temp1n,temp1n,Z;
           temp1,temp1n,Z;
           temp1n,temp1,Z;
           temp1n,temp1n,Z;
           temp1,temp1n,Z;
           temp1n,temp1,Z;
           temp1n,temp1n,Z;
           temp1,temp1n,Z;
           temp1n,temp1,Z;
           //res= temp|temp1
           temp1n,temp1n,Z;
           res,res,temp;
           temp1,temp1n,Z;
           temp1n,res,Z;
           xor,xor,temp;
           Z,xor,temp1;
           mxr,mxr,Z;
           xor,mxr,Z;
           mxr,res,Z,_SH;

           //s[i]=temp
           c2:str(0),str(0),res;                                        //s[i]=temp
           M,c0(2),Z;
           M,c1(2),Z;
           M,d0(2),Z;

           M,c2(0),Z;
           M,c2(1),Z;
           x(2),x(2),sb_addr;
           x1(2),x1(2),sb_addr;
           M,sbox_counter,Z;                                 //sbox_counter++
           sbox_counter,val8,Z,fun2;                         //While sbox_counter<8
           val8,val8,con8;
           Z,Z,Z,sbox_start;                                 //Jump to start


           //End of function reset variables
           fun2:Z,Z,Z;
           val8,val8,con8;
           c0(2),c0(2),str;
           c1(2),c1(2),str;
           d0(2),d0(2),str;

           c2(0),c2(0),str;
           c2(1),c2(1),str;
           Z,Z,Z,return;


/*main function*/
//_main:Z,Z,Z,sbox_layer;
//     return:Z,Z,Z;
//     loop: Z,Z,Z,loop;             // End of program

_main:rnd,rnd,rndmax,begin;         //MOV rnd,rndmax; JMP Begin
     rounds:Z , Z , Z;
     U ,rnd, Z;
     begin:Z,Z,Z,sbox_layer;      //JMP AddRoundKey;
     return:Z ,rnd, Z,loop;       //BREQ rnd; EOP
     Z , Z , Z,rounds;             //JMP rounds
     loop: Z,Z,Z,loop;             // End of program
