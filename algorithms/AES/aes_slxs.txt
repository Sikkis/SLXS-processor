str  : [0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34]
SBox : [0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16]
key  : [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c,0xa0,0xfa,0xfe,0x17,0x88,0x54,0x2c,0xb1,0x23,0xa3,0x39,0x39,0x2a,0x6c,0x76,0x05,0xf2,0xc2,0x95,0xf2,0x7a,0x96,0xb9,0x43,0x59,0x35,0x80,0x7a,0x73,0x59,0xf6,0x7f,0x3d,0x80,0x47,0x7d,0x47,0x16,0xfe,0x3e,0x1e,0x23,0x7e,0x44,0x6d,0x7a,0x88,0x3b,0xef,0x44,0xa5,0x41,0xa8,0x52,0x5b,0x7f,0xb6,0x71,0x25,0x3b,0xdb,0x0b,0xad,0x00,0xd4,0xd1,0xc6,0xf8,0x7c,0x83,0x9d,0x87,0xca,0xf2,0xb8,0xbc,0x11,0xf9,0x15,0xbc,0x6d,0x88,0xa3,0x7a,0x11,0x0b,0x3e,0xfd,0xdb,0xf9,0x86,0x41,0xca,0x00,0x93,0xfd,0x4e,0x54,0xf7,0x0e,0x5f,0x5f,0xc9,0xf3,0x84,0xa6,0x4f,0xb2,0x4e,0xa6,0xdc,0x4f,0xea,0xd2,0x73,0x21,0xb5,0x8d,0xba,0xd2,0x31,0x2b,0xf5,0x60,0x7f,0x8d,0x29,0x2f,0xac,0x77,0x66,0xf3,0x19,0xfa,0xdc,0x21,0x28,0xd1,0x29,0x41,0x57,0x5c,0x00,0x6e,0xd0,0x14,0xf9,0xa8,0xc9,0xee,0x25,0x89,0xe1,0x3f,0x0c,0xc8,0xb6,0x63,0x0c,0xa6]
Z : 0
M : -1
U : 1
t : 0x15555
v : 0x0aaaa
w : 0x15555
x : 0x0aaaa
y : 0x15555
c0: 0x15555
c1: 0x0aaaa
c2: 0x15555
c3: 0x0aaaa
mask  : 0x000ff
maskn : 0x1ff01
mod   : 0x0001b
ct4   : 0x4
const4: 0x4
ct4n  : 0x1fffc
const12: 0xc
rnd   : 0x1aaaa
rndmax: 0xa
*st15addr: str(15)
*stend : str(15)
staddr: str
st1 : str
st2 : str
st3 : str

/* ************************************************************************* */
/*AddRoundKey*/
AddRoundKey:Z,str(0),key(0);                                //str(n)=str(n) xor key(n)
            M,AddRoundKey(2),Z;                             //INC key
            AddRoundKey(1),st15addr,Z,function1;            //
            M,AddRoundKey(1),Z;                             //INC str
            st15addr,st15addr,stend,AddRoundKey;            // st15addr=stend
   function1:AddRoundKey(1),AddRoundKey(1),staddr;          //str(n)=staddr
            st15addr,st15addr,stend,return2;                //st15addr=stend

/* ************************************************************************* */
/*SubBytes*/
SubBytes:t,t,Z;                             //t = 0                   |  CLR t
  st_add:st1 ,t,Z;                          //t = -*st(n)             | Addi SBox st(n)
         t,s_b(2),Z;                        //*SBox = *SBox-(-*st(n)) |  -------
     s_b:st2,st3,SBox(0);                   //st(n) = SBox(st(n))     |  SBox
         s_b(2),s_b(2),SBox;                //SBox(n) = SBoxaddr      |  MOV SBox SBoxaddr
         st_add(0),st15addr,Z,funcsb;        //st15=st15-st(n) , JMP 0 func1
         M,st_add(0),Z;                     //*st1(n) = *st1(n+1)     |  INC st1(n)
         M,s_b(0),Z;                        //*st2(n) = *st2(n+1)     |  INC st2(n)
         M,s_b(1),Z;                        //*st3(n) = *st3(n+1)     |  INC st3(n)
         st15addr,st15addr,stend,SubBytes;  //*st15addr = *stend      |  MOV st15addr stend, JMP SubBytes
  funcsb:st_add(0),st_add(0),staddr;        //st1(n) = staddr         |  MOV st1(n) staddr
         s_b(0),s_b(0),staddr;              //st2(n) = staddr         |  MOV st2(n) staddr
         s_b(1),s_b(1),staddr;              //st3(n) = staddr         |  MOV st3(n) staddr
         st15addr,st15addr,stend,ShiftRows; //*st15addr = *stend      |  MOV st15addr stend
/* ************************************************************************* */
/*Shift Rows*/
ShiftRows: t,t,str(1);                //t= str(1)      |  MOV t,st1
           str(1),str(1),str(5);      //st1  = str5    |  MOV str1,str5
           str(5),str(5),str(9);      //str5  = str9   |  MOV str5,str9
           str(9),str(9),str(13);     //str9  = str13  |  MOV str9,str13
           str(13),str(13),t;         //str13 = str1   |  MOV str13,t
           t,t,str(2);                //t = str2       |  MOV t,str2
           str(2),str(2),str(10);     //str2  = str10  |  MOV str2,str10
           str(10),str(10),t;         //str10 = str2   |  MOV str10,t
           t,t,str(6);                //t = str6       |  MOV t,str6
           str(6),str(6),str(14);     // str6  = str14 |  MOV str6,str14
           str(14),str(14),t;         //str14 = str6   |  MOV str14,t
           t,t,str(15);               //t = str15      |  MOV t,str15
           str(15),str(15),str(11);   //str15 = str11  |  MOV str15,str11
           str(11),str(11),str(7);    //str11 = str7   |  MOV str11,str7
           str(7),str(7),str(3);      //str7  = str3   |  MOV str7,str3
           str(3),str(3),t,return1;     //str3  = str15|  MOV str7,str3,JMP return1

/* ************************************************************************* */
/*MixColumns*/
MixColumns:c0,c0,str(0);    //c0 = st(n)
    st1_mx:c1,c1,str(1);    //c1 = st(n+1)
    st2_mx:c2,c2,str(2);    //c2 = st(n+2)
    st3_mx:c3,c3,str(3);    //c3 = st(n+3)
        lp:t,t,Z;           //t  = 0
           c0,t,Z;          //t  = -c0
           v,v,c0;          //v  = c0
           t,v,Z;           //v  = 2*c0
           mask,v,Z,func1;  //v  = v - 0xff
           U,v,Z;           //v  = v - 1
           Z,v,mod;         //v  = v xor 0x1b
           Z,Z,Z,func2;     //JMP func2
     func1:maskn,v,Z;       //v  = v + 0xff
     func2:t,t,Z;           //t  = 0
           c1,t,Z;          //t  = -c1
           w,w,c1;          //w  = c1
           t,w,Z;           //w  = 2*c1
           mask,w,Z,func3;  //w  = w - 0xff
           U,w,Z;           //w  = w - 1
           Z,w,mod;         //w  = w xor x1b
           Z,Z,Z,func4;     // JMP func4
     func3:maskn,w,Z;       //w  = w + 0xff
     func4:Z,w,c1;          //w  = w xor c1
           Z,v,w;           //v  = v xor w
           Z,v,c2;          //v  = v xor c2
           Z,v,c3;          //v  = v xor c3
    str_mx:c0,str(0),v;     //st(n) = v
           t,t,c0;          //t  = c0
           M,str_mx(1),Z;   //st(n) = st(n+1)
           U,ct4,Z,func5;   //ct4 = ct4 - 1  |  DEC ct
           c0,c0,c1;        //c0 = c1
           c1,c1,c2;        //c1 = c2
           c2,c2,c3;        //c2 = c3
           c3,c3,t,lp;      //c3 = c0
     func5:st3_mx(2),st15addr,Z,func6;
           st15addr,st15addr,stend;     //st15addr = stend
           ct4n,MixColumns(2),Z;        //INC 4,st(n)
           ct4n,st1_mx(2),Z;            //INC 4,st(n+1)
           ct4n,st2_mx(2),Z;            //INC 4,st(n+2)
           ct4n,st3_mx(2),Z;            //INC 4,st(n+3)
           ct4,ct4,const4,MixColumns;
      func6:st15addr,st15addr,stend;    //st15addr = stend
           const12,MixColumns(2),Z;     //DEC 12,st(n)
           const12,st1_mx(2),Z;         //DEC 12,st(n)
           const12,st2_mx(2),Z;         //DEC 12,st(n)
           const12,st3_mx(2),Z;         //DEC 12,st(n)
           ct4,ct4,const4;
           str_mx(1),str_mx(1),staddr,AddRoundKey;
/* ************************************************************************* */
/*Main*/
_main:rnd,rnd,rndmax,begin;         //MOV rnd,rndmax; JMP Begin
      rounds:Z , Z , Z ,SubBytes;   //JMP SubBytes; (rounds)
      return1:U ,rnd, Z ,begin;     //DEC rnd;JMP begin
      Z , Z , Z, MixColumns;        //JMP MixColumns
      begin:Z,Z,Z,AddRoundKey;      //JMP AddRoundKey;
      return2:Z ,rnd, Z,loop;       //BREQ rnd; EOP
      Z , Z , Z,rounds;             //JMP rounds
      loop: Z,Z,Z,loop;             // End of program
