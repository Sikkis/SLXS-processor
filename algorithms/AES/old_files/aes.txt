0000  00284 00284 00284 00704  |  S Z Z Z 0x704        |  Initial line, jump to code
0004  00063 0007c 00077 0007b  |  0x00 0x01 0x02 0x03  |  -- SBox table {
0008  000f2 0006b 0006f 000c5  |  0x04 0x05 0x06 0x07
000c  00030 00001 00067 0002b  |  0x08 0x09 0x0a 0x0b
0010  000fe 000d7 000ab 00076  |  0x0c 0x0d 0x0e 0x0f
0014  000ca 00082 000c9 0007d  |  0x10 0x11 0x12 0x13
0018  000fa 00059 00047 000f0  |  0x14 0x15 0x16 0x17
001c  000ad 000d4 000a2 000af  |  0x18 0x19 0x1a 0x1b
0020  0009c 000a4 00072 000c0  |  0x1c 0x1d 0x1e 0x1f
0024  000b7 000fd 00093 00026  |  0x20 0x21 0x22 0x23
0028  00036 0003f 000f7 000cc  |  0x24 0x25 0x26 0x27
002c  00034 000a5 000e5 000f1  |  0x28 0x29 0x2a 0x2b
0030  00071 000d8 00031 00015  |  0x2c 0x2d 0x2e 0x2f
0034  00004 000c7 00023 000c3  |  0x30 0x31 0x32 0x33
0038  00018 00096 00005 0009a  |  0x34 0x35 0x36 0x37
003c  00007 00012 00080 000e2  |  0x38 0x39 0x3a 0x3b
0040  000eb 00027 000b2 00075  |  0x3c 0x3d 0x3e 0x3f
0044  00009 00083 0002c 0001a  |  0x40 0x41 0x42 0x43
0048  0001b 0006e 0005a 000a0  |  0x44 0x45 0x46 0x47
004c  00052 0003b 000d6 000b3  |  0x48 0x49 0x4a 0x4b
0050  00029 000e3 0002f 00084  |  0x4c 0x4d 0x4e 0x4f
0054  00053 000d1 00000 000ed  |  0x50 0x51 0x52 0x53
0058  00020 000fc 000b1 0005b  |  0x54 0x55 0x56 0x57
005c  0006a 000cb 000be 00039  |  0x58 0x59 0x5a 0x5b
0060  0004a 0004c 00058 000cf  |  0x5c 0x5d 0x5e 0x5f
0064  000d0 000ef 000aa 000fb  |  0x60 0x61 0x62 0x63
0068  00043 0004d 00033 00085  |  0x64 0x65 0x66 0x67
006c  00045 000f9 00002 0007f  |  0x68 0x69 0x6a 0x6b
0070  00050 0003c 0009f 000a8  |  0x6c 0x6d 0x6e 0x6f
0074  00051 000a3 00040 0008f  |  0x70 0x71 0x72 0x73
0078  00092 0009d 00038 000f5  |  0x74 0x75 0x76 0x77
007c  000bc 000b6 000da 00021  |  0x78 0x79 0x7a 0x7b
0080  00010 000ff 000f3 000d2  |  0x7c 0x7d 0x7e 0x7f
0084  000cd 0000c 00013 000ec  |  0x80 0x81 0x82 0x83
0088  0005f 00097 00044 00017  |  0x84 0x85 0x86 0x87
008c  000c4 000a7 0007e 0003d  |  0x88 0x89 0x8a 0x8b
0090  00064 0005d 00019 00073  |  0x8c 0x8d 0x8e 0x8f
0094  00060 00081 0004f 000dc  |  0x90 0x91 0x92 0x93
0098  00022 0002a 00090 00088  |  0x94 0x95 0x96 0x97
009c  00046 000ee 000b8 00014  |  0x98 0x99 0x9a 0x9b
00a0  000de 0005e 0000b 000db  |  0x9c 0x9d 0x9e 0x9f
00a4  000e0 00032 0003a 0000a  |  0xa0 0xa1 0xa2 0xa3
00a8  00049 00006 00024 0005c  |  0xa4 0xa5 0xa6 0xa7
00ac  000c2 000d3 000ac 00062  |  0xa8 0xa9 0xaa 0xab
00b0  00091 00095 000e4 00079  |  0xac 0xad 0xae 0xaf
00b4  000e7 000c8 00037 0006d  |  0xb0 0xb1 0xb2 0xb3
00b8  0008d 000d5 0004e 000a9  |  0xb4 0xb5 0xb6 0xb7
00bc  0006c 00056 000f4 000ea  |  0xb8 0xb9 0xba 0xbb
00c0  00065 0007a 000ae 00008  |  0xbc 0xbd 0xbe 0xbf
00c4  000ba 00078 00025 0002e  |  0xc0 0xc1 0xc2 0xc3
00c8  0001c 000a6 000b4 000c6  |  0xc4 0xc5 0xc6 0xc7
00cc  000e8 000dd 00074 0001f  |  0xc8 0xc9 0xca 0xcb
00d0  0004b 000bd 0008b 0008a  |  0xcc 0xcd 0xce 0xcf
00d4  00070 0003e 000b5 00066  |  0xd0 0xd1 0xd2 0xd3
00d8  00048 00003 000f6 0000e  |  0xd4 0xd5 0xd6 0xd7
00dc  00061 00035 00057 000b9  |  0xd8 0xd9 0xda 0xdb
00e0  00086 000c1 0001d 0009e  |  0xdc 0xdd 0xde 0xdf
00e4  000e1 000f8 00098 00011  |  0xe0 0xe1 0xe2 0xe3
00e8  00069 000d9 0008e 00094  |  0xe4 0xe5 0xe6 0xe7
00ec  0009b 0001e 00087 000e9  |  0xe8 0xe9 0xea 0xeb
00f0  000ce 00055 00028 000df  |  0xec 0xed 0xee 0xef
00f4  0008c 000a1 00089 0000d  |  0xf0 0xf1 0xf2 0xf3
00f8  000bf 000e6 00042 00068  |  0xf4 0xf5 0xf6 0xf7
00fc  00041 00099 0002d 0000f  |  0xf8 0xf9 0xfa 0xfb
0100  000b0 00054 000bb 00016  |  0xfc 0xfd 0xfe 0xff  |  -- SBox table }
-----------------------------------------------------------------------
0284  00000 1ffff 00001 15555  |  Z    M    U    t                    |  -- Constants and variables
0288  0f800 00004 0f80f 0f80f  |  staddr Sboxaddr st15addr stend      |
028c  0aaaa 15555 0aaaa 15555  |  v    w      x    y                  |
0290  15555 0aaaa 15555 0aaaa  |  c0   c1     c2   c3                 |
0294  000ff 1ff01 0001b 00000  |  mask maskn  mod                     |
0298  00004 00004 1fffc 0000c  |  ct4  const4 ct4n const12            |
029c  1aaaa 0000a 00000 00000  |  rnd  rndmax                         |
-----------------------------------------------------------------------  -- SubBytes
0304  00287 00287 00284 00308  |  S t       t    Z $+1;               |  t = 0                    |  CLR t
0308  0f800 00287 00284 0030c  |  S st1(n)  t    Z $+1;               |  t = -*st(n)              |  Addi SBox st(n)
030c  00287 00312 00284 00310  |  S t     *SBox  Z $+1;               |  *SBox = *SBox-(-*st(n))  |  -------   
0310  0f800 0f800 00004 00314  |  S st2(n) st3(n) Sbox(st(n)) $+1     |  st(n) = SBox(st(n))      |  SBox
0314  00312 00312 00289 00318  |  S *SBox(n) *SBox(n) *XBoxaddr $+1;  |  SBox(n) = SBoxaddr       |  MOV SBox SBoxaddr  
0318  00308 0028a 00284 0032c  |  S *st1(n) *st15addr Z $+17;         |  st15=st15-st(n), JMP 0 $+17
031c  00285 00308 00284 00320  |  S M       *st1(n)   Z $+1;          |  *st1(n) = *st1(n+1)      |  INC st1(n)
0320  00285 00310 00284 00324  |  S M       *st2(n)   Z $+1;          |  *st2(n) = *st2(n+1)      |  INC st2(n)
0324  00285 00311 00284 00328  |  S M       *st3(n)   Z $+1;          |  *st3(n) = *st3(n+1)      |  INC st3(n)
0328  0028a 0028a 0028b 00304  |  S *st15addr *st15addr *stend $-39;  |  *st15addr = *stend       |  MOV st15addr stend, JMP $-39
032c  00308 00308 00288 00330  |  S *st1(n) *st1(n) *staddr $+1;      |  st1(n) = staddr          |  MOV st1(n) staddr
0330  00310 00310 00288 00334  |  S *st2(n) *st2(n) *staddr $+1;      |  st2(n) = staddr          |  MOV st2(n) staddr
0334  00311 00311 00288 00338  |  S *st3(n) *st3(n) *staddr $+1;      |  st3(n) = staddr          |  MOV st3(n) staddr
0338  0028a 0028a 0028b 00384  |  S *st15addr *st15addr *stend $SR;   |  *st15addr = *stend       |  MOV st15addr stend
-----------------------------------------------------------------------  -- ShiftRows
0384  00287 00287 0f801 00388  |  S t    t    st1  $+1;               |  t    = st1               |  MOV t,st1
0388  0f801 0f801 0f805 0038c  |  S st1  st1  st5  $+1;               |  st1  = st5               |  MOV st1,st5
038c  0f805 0f805 0f809 00390  |  S st5  st5  st9  $+1;               |  st5  = st9               |  MOV st5,st9
0390  0f809 0f809 0f80d 00394  |  S st9  st9  st13 $+1;               |  st9  = st13              |  MOV st9,st13
0394  0f80d 0f80d 00287 00398  |  S st13 st13 t    $+1;               |  st13 = st1               |  MOV st13,t
0398  00287 00287 0f802 0039c  |  S t    t    st2  $+1;               |  t    = st2               |  MOV t,st2
039c  0f802 0f802 0f80a 003a0  |  S st2  st2  st10 $+1;               |  st2  = st10              |  MOV st2,st10
03a0  0f80a 0f80a 00287 003a4  |  S st10 st10 t    $+1;               |  st10 = st2               |  MOV st10,t
03a4  00287 00287 0f806 003a8  |  S t    t    st6  $+1;               |  t    = st6               |  MOV t,st6
03a8  0f806 0f806 0f80e 003ac  |  S st6  st6  st14 $+1;               |  st6  = st14              |  MOV st6,st14
03ac  0f80e 0f80e 00287 003b0  |  S st14 st14 t    $+1;               |  st14 = st6               |  MOV st14,t
03b0  00287 00287 0f80f 003b4  |  S t    t    st15 $+1;               |  t    = st15              |  MOV t,st15
03b4  0f80f 0f80f 0f80b 003b8  |  S st15 st15 st11 $+1;               |  st15 = st11              |  MOV st15,st11
03b8  0f80b 0f80b 0f807 003bc  |  S st11 st11 st7  $+1;               |  st11 = st7               |  MOV st11,st7
03bc  0f807 0f807 0f803 003c0  |  S st7  st7  st3  $+1;               |  st7  = st3               |  MOV st7,st3
03c0  0f803 0f803 00287 0070c  |  S st3  st3  t    return1;           |  st3  = st15              |  MOV st3,t
-----------------------------------------------------------------------  -- MixColumns
0404  00290 00290 0f800 00408  |  S c0  c0 st(n)   $+1;      |  c0 = st(n)
0408  00291 00291 0f801 0040c  |  S c1  c1 st(n+1) $+1;      |  c1 = st(n+1)
040c  00292 00292 0f802 00410  |  S c2  c2 st(n+2) $+1;      |  c2 = st(n+2)
0410  00293 00293 0f803 00414  |  S c3  c3 st(n+3) $+1;      |  c3 = st(n+3)
0414  00287 00287 00284 00418  |  S t   t  Z       $+1;      |  t  = 0
0418  00290 00287 00284 0041c  |  S c0  t  Z       $+1;      |  t  = -c0
041c  0028c 0028c 00290 00420  |  S v   v  c0      $+1;      |  v  = c0
0420  00287 0028c 00284 00424  |  S t   v  Z       $+1;      |  v  = 2*c0
0424  00294 0028c 00284 00434  |  S mask v Z       $+13;     |  v  = v - xff
0428  00286 0028c 00284 0042c  |  S U   v  Z       $+1;      |  v  = v - 1
042c  00284 0028c 00296 00430  |  S Z   v  mod     $+1;      |  v  = v xor x1b
0430  00284 00284 00284 00440  |  S Z   Z  Z       $+13;     |  JMP $+13
0434  00295 0028c 00284 00438  |  S maskn v Z      $+1;      |  v  = v + xff
0438  00284 00284 00284 0043c  |  S Z   Z  Z       $+1;      |  NOP
043c  00284 00284 00284 00440  |  S Z   Z  Z       $+1;      |  NOP
0440  00287 00287 00284 00444  |  S t   t  Z       $+1;      |  t  = 0
0444  00291 00287 00284 00448  |  S c1  t  Z       $+1;      |  t  = -c1
0448  0028d 0028d 00291 0044c  |  S w   w  c1      $+1;      |  w  = c1
044c  00287 0028d 00284 00450  |  S t   w  Z       $+1;      |  w  = 2*c1
0450  00294 0028d 00284 00460  |  S mask w Z       $+13;     |  w  = w - xff
0454  00286 0028d 00284 00458  |  S U   w  Z       $+1;      |  w  = w - 1
0458  00284 0028d 00296 0045c  |  S Z   w  mod     $+1;      |  w  = w xor x1b
045c  00284 00284 00284 0046c  |  S Z   Z  Z       $+13;     |  JMP $+13
0460  00295 0028d 00284 00464  |  S maskn w Z      $+1;      |  w  = w + xff
0464  00284 00284 00284 00468  |  S Z   Z  Z       $+1;      |  NOP
0468  00284 00284 00284 0046c  |  S Z   Z  Z       $+1;      |  NOP
046c  00284 0028d 00291 00470  |  S Z   w  c1      $+1;      |  w  = w xor c1
0470  00284 0028c 0028d 00474  |  S Z   v  w       $+1;      |  v  = v xor w
0474  00284 0028c 00292 00478  |  S Z   v  c2      $+1;      |  v  = v xor c2
0478  00284 0028c 00293 0047c  |  S Z   v  c3      $+1;      |  v  = v xor c3
047c  00290 0f800 0028c 00480  |  S c0  st2(n) v   $+1;      |  st(n) = v
0480  00287 00287 00290 00484  |  S t   t  c0      $+1;      |  t  = c0
0484  00285 0047d 00284 00488  |  S M   *st2(n) Z  $+1;      |  st(n) = st(n+1)
0488  00286 00298 00284 0049c  |  S U   ct4 Z      $+17;     |  ct4 = ct4 - 1             |  DEC ct
048c  00290 00290 00291 00490  |  S c0  c0 c1      $+1;      |  c0 = c1
0490  00291 00291 00292 00494  |  S c1  c1 c2      $+1;      |  c1 = c2
0494  00292 00292 00293 00498  |  S c2  c2 c3      $+1;      |  c2 = c3
0498  00293 00293 00287 00414  |  S c3  c3 t       $-135;    |  c3 = c0
049c  00412 0028a 00284 004b8  |  S st(n+3) st15addr Z $+25;
04a0  0028a 0028a 0028b 004a4  |  S st15addr st15addr stend $+1;  |  st15addr = stend       |
04a4  0029a 00406 00284 004a8  |  S ct4n     st(n)    Z $+1;  |  INC 4,st(n)
04a8  0029a 0040a 00284 004ac  |  S ct4n     st(n+1)  Z $+1;  |  INC 4,st(n+1)
04ac  0029a 0040e 00284 004b0  |  S ct4n     st(n+2)  Z $+1;  |  INC 4,st(n+2)
04b0  0029a 00412 00284 004b4  |  S ct4n     st(n+3)  Z $+1;  |  INC 4,st(n+3)
04b4  00298 00298 00299 00404  |  S ct4      ct4       const4 $-179;
04b8  0028a 0028a 0028b 004bc  |  S st15addr st15addr stend $+1;  |  st15addr = stend       |
04bc  0029b 00406 00284 004c0  |  S const12 st(n)    Z $+1;  |  DEC 12,st(n)
04c0  0029b 0040a 00284 004c4  |  S const12 st(n+1)  Z $+1;  |  DEC 12,st(n+1)
04c4  0029b 0040e 00284 004c8  |  S const12 st(n+2)  Z $+1;  |  DEC 12,st(n+2)
04c8  0029b 00412 00284 004cc  |  S const12 st(n+3)  Z $+1;  |  DEC 12,st(n+3)
04cc  00298 00298 00299 004d0  |  S ct4      ct4       const4 $+1;
04d0  0047d 0047d 00288 00604  |  S *st2(n) *st2(n) staddr $ARK;
------------------------------------------------------------------------  -- AddRoundKey
0604  00284 0f800 0f000 00608  |  S Z         st(n)     k(m)(n) $+1;    |  st(n) = st(n) xor k(m)(n)         |  XOR st(n),k(m)(n)
0608  00285 00606 00284 0060c  |  S M         *k(m)(n)  Z       $+1;    |  *k(m)(n) = *k(m)(n+1){*k(m+1)(0)} |  INC k(m)(n)
060c  00605 0028a 00284 00618  |  S *st(n)    *st15addr Z       $+9;    |  st15=st15-st(n), JMP 0 $+9
0610  00285 00605 00284 00614  |  S M         *st(n)    Z       $+1;    |  *st(n) = *st(n+1)                 |  INC st(n)
0614  0028a 0028a 0028b 00604  |  S *st15addr *st15addr *stend  $-19;   |  *st15addr = *stend                |  MOV st15addr stend, JMP $-19
0618  00605 00605 00288 0061c  |  S *st(n)    *st(n)    *staddr $+1;    |  st1(n) = staddr                   |  MOV st1(n) staddr
061c  0028a 0028a 0028b 00718  |  S *st15addr *st15addr *stend  return2;|  *st15addr = *stend                |  MOV st15addr stend
------------------------------------------------------------------------  --  AES
0704  0029c 0029c 0029d 00714  |  S rnd rnd rndmax $+13;                |  rnd = rndmax                      |  MOV rnd,rndmax; JMP Begin
0708  00284 00284 00284 00304  |  S Z Z Z $-1031;                       |  0 = (0-0)   xor  0 = 0x00000      |  JMP SubBytes; (rounds)
070c  00286 0029c 00284 00714  |  S U rnd Z $+5;                        |  rnd = rnd - 1                     |  DEC rnd; (return1)
0710  00284 00284 00284 00404  |  S Z Z Z $-783;                        |  0 = (0-0)   xor  0 = 0x00000      |  JMP MixColumns
0714  00284 00284 00284 00604  |  S Z Z Z $-275;                        |  0 = (0-0)   xor  0 = 0x00000      |  JMP AddRoundKey;
0718  00284 0029c 00284 00720  |  S Z rnd Z $+5;                        |  rnd = rnd                         |  BREQ rnd; (return2)
071c  00284 00284 00284 00708  |  S Z Z Z $-23;                         |  0 = (0-0)   xor  0 = 0x00000      |  JMP rounds;
0720  00284 00284 00284 00720  |  loop: 0x0 0x0 0x0 loop                |  0 = (0-0)   xor  0 = 0x00000 : loop
-----------------------------------------------------------------------
f000  0002b 0007e 00015 00016  |  k00  k01  k02  k03   |  -- AES key0 bytes {
f004  00028 000ae 000d2 000a6  |  k04  k05  k06  k07
f008  000ab 000f7 00015 00088  |  k08  k09  k010 k011
f00c  00009 000cf 0004f 0003c  |  k012 k013 k014 k015  |  -- AES key0 bytes }
f010  000a0 000fa 000fe 00017  |  k10  k11  k12  k13   |  -- AES key1 bytes {
f014  00088 00054 0002c 000b1  |  k14  k15  k16  k17
f018  00023 000a3 00039 00039  |  k18  k19  k110 k111
f01c  0002a 0006c 00076 00005  |  k112 k113 k114 k115  |  -- AES key1 bytes }
f020  000f2 000c2 00095 000f2  |  k20  k21  k22  k23   |  -- AES key2 bytes {
f024  0007a 00096 000b9 00043  |  k24  k25  k26  k27
f028  00059 00035 00080 0007a  |  k28  k29  k210 k211
f02c  00073 00059 000f6 0007f  |  k212 k213 k214 k215  |  -- AES key2 bytes }
f030  0003d 00080 00047 0007d  |  k30  k31  k32  k33   |  -- AES key3 bytes {
f034  00047 00016 000fe 0003e  |  k34  k35  k36  k37
f038  0001e 00023 0007e 00044  |  k38  k39  k310 k311
f03c  0006d 0007a 00088 0003b  |  k312 k313 k314 k315  |  -- AES key3 bytes }
f040  000ef 00044 000a5 00041  |  k40  k41  k42  k43   |  -- AES key4 bytes {
f044  000a8 00052 0005b 0007f  |  k44  k45  k46  k47
f048  000b6 00071 00025 0003b  |  k48  k49  k410 k411
f04c  000db 0000b 000ad 00000  |  k412 k413 k414 k415  |  -- AES key4 bytes }
f050  000d4 000d1 000c6 000f8  |  k50  k51  k52  k53   |  -- AES key5 bytes {
f054  0007c 00083 0009d 00087  |  k54  k55  k56  k57
f058  000ca 000f2 000b8 000bc  |  k58  k59  k510 k511
f05c  00011 000f9 00015 000bc  |  k512 k513 k514 k515  |  -- AES key5 bytes }
f060  0006d 00088 000a3 0007a  |  k60  k61  k62  k63   |  -- AES key6 bytes {
f064  00011 0000b 0003e 000fd  |  k64  k65  k66  k67
f068  000db 000f9 00086 00041  |  k68  k69  k610 k611
f06c  000ca 00000 00093 000fd  |  k612 k613 k614 k615  |  -- AES key6 bytes }
f070  0004e 00054 000f7 0000e  |  k70  k71  k72  k73   |  -- AES key7 bytes {
f074  0005f 0005f 000c9 000f3  |  k74  k75  k76  k77
f078  00084 000a6 0004f 000b2  |  k78  k79  k710 k711
f07c  0004e 000a6 000dc 0004f  |  k712 k713 k714 k715  |  -- AES key7 bytes }
f080  000ea 000d2 00073 00021  |  k80  k81  k82  k83   |  -- AES key8 bytes {
f084  000b5 0008d 000ba 000d2  |  k84  k85  k86  k87
f088  00031 0002b 000f5 00060  |  k88  k89  k810 k811
f08c  0007f 0008d 00029 0002f  |  k812 k813 k814 k815  |  -- AES key8 bytes }
f090  000ac 00077 00066 000f3  |  k90  k91  k92  k93   |  -- AES key9 bytes {
f094  00019 000fa 000dc 00021  |  k94  k95  k96  k97
f098  00028 000d1 00029 00041  |  k98  k99  k910 k911
f09c  00057 0005c 00000 0006e  |  k912 k913 k914 k915  |  -- AES key9 bytes }
f0a0  000d0 00014 000f9 000a8  |  k100  k101  k102  k103   |  -- AES key10 bytes {
f0a4  000c9 000ee 00025 00089  |  k104  k105  k106  k107
f0a8  000e1 0003f 0000c 000c8  |  k108  k109  k1010 k1011
f0ac  000b6 00063 0000c 000a6  |  k1012 k1013 k1014 k1015  |  -- AES key10 bytes }
-----------------------------------------------------------------------
f800  00032 00043 000f6 000a8  |  st0  st1  st2  st3   |  -- AES state bytes {
f804  00088 0005a 00030 0008d  |  st4  st5  st6  st7
f808  00031 00031 00098 000a2  |  st8  st9  st10 st11
f80c  000e0 00037 00007 00034  |  st12 st13 st14 st15  |  -- AES state bytes }
--------------------------------------------------------
